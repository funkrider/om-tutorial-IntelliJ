<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487616177750">{:repl-history {:ide [], :local [&quot;(+ 1 3)&quot; &quot;(in-ns om-tutorial.core)&quot; &quot;(ns om-tutorial.core)&quot; &quot;(map #(hello {:react-key % :title (str \&quot;Hello \&quot; %)})\n  (range 3))&quot; &quot;(defui HelloWorld\n  Object\n  (render [this]\n    (dom/div nil (:title (om/props this) ))))\n\n(def hello (om/factory HelloWorld))&quot; &quot;(ns om-tutorial.core\n  (:require [goog.dom :as gdom]\n            [om.next :as om :refer-macros [defui]]\n            [om.dom :as dom]))&quot; &quot;(defui HelloWorld\n  Object\n  (render [this]\n    (dom/div nil (:title (om/props this) ))))&quot; &quot;(def hello (om/factory HelloWorld))&quot; &quot;(js/ReactDOM.render\n  (apply dom/div nil\n    (map #(hello {:react-key % :title (str \&quot;Hello \&quot; %)})\n      (range 3)))\n  (gdom/getElement \&quot;app\&quot;))&quot; &quot;(map #(hello {:react-key % :title (str \&quot;Hello \&quot; %)})\n      (range 3))&quot; &quot;(defui HelloWorld\n  Object\n  (render [this]\n    (dom/div nil (:title (om/props this) ))))\n(range 3)\n\n(def hello (om/factory HelloWorld))&quot; &quot;(range 3)&quot; &quot;(map #(+ % 10) (range 3))&quot; &quot;(map #(str \&quot;Hello \&quot; %) (range 3))&quot; &quot;(hello {:title \&quot;test\&quot;})&quot; &quot;(apply #(* % %) '(3 4 5))&quot; &quot;(apply + 1\n  '(3 4 5))&quot; &quot;(apply + 1\n  '(\n     4 5))&quot; &quot;(apply + 1 '(4 5))&quot; &quot;(+ 1 '(4 5))&quot; &quot;(in-ns 'om-tutorial.core)&quot; &quot;(defn read\n  [{:keys [state] :as env}vkey params]\n  (set [st @state]\n    (if-let [[_ v] (find st key)]\n      {:value v}\n      {:value :not-found})))&quot; &quot;(defn read\n  [{:keys [state] :as env} key params]\n  (let [st @state]\n    (if-let [[_ v] (find st key)]\n      {:value v}\n      {:value :not-found})))&quot; &quot;(def my-parse (om/parse {:read read}))&quot; &quot;(def my-state (atom {:count 0}))\n(my-parser {:state my-state} [:count :title])&quot; &quot;(in-ns 'om-tutorial.core)\n(defn mutate\n  [{:keys [state] :as env} key params]\n  (if (= 'increment key)\n    {:value {:keys [:count]}\n     :action #(swap! state update-in [:count] inc)}\n    {:value :not-found}))&quot; &quot;(def my-parser (om/parser {:read read :mutate mutate}))\n(my-parser {:state my-state} '[(increment)])\n@my-state&quot; &quot;(in-ns 'om-tutorial.core)\n(om/from-history reconciler\n  #uuid \&quot;db7c59a7-ea5d-46b5-b684-1d194563ffc4\&quot;)&quot; &quot;(om.next/transact! reconciler '[(increment)])&quot; &quot;(subvec [1 2 3 4 5] 1 3)&quot; &quot;(subvec [1 2 3 4 5] 1\n  )&quot; &quot;(subvec [1 2 3 4 5] nil 3)&quot; &quot;(subvec [1 2 3 4 5] nil nil)&quot; &quot;(om/get-query (om/class-&gt;any reconciler AnimalsList))&quot; &quot;(om/set-query! (om/class-&gt;any reconciler AnimalsList) {:params {:start 0 :end 5}})&quot; &quot;(reset! app-state\n  (om/from-history reconciler\n    #uuid \&quot;c268f2f2-6989-4a7f-bd1d-b6be4f15c45f\&quot;))&quot;], :remote []}}</component>
</project>